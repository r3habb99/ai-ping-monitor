name: Build and Release Cross-Platform

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "draft"
        type: choice
        options:
          - draft
          - prerelease
          - release

env:
  NODE_VERSION: "18"

jobs:
  # Desktop builds
  build-desktop:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2-dev libxcomposite-dev libxdamage-dev libxrandr-dev libgbm-dev libxss-dev libasound2-dev

      - name: Setup Windows code signing
        if: matrix.os == 'windows-latest' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          echo "${{ secrets.WINDOWS_CERTIFICATE }}" | base64 --decode > certs/windows-cert.p12
        env:
          CSC_LINK: certs/windows-cert.p12
          CSC_KEY_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}

      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          npm run build-win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ matrix.os == 'windows-latest' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && 'certs/windows-cert.p12' || '' }}
          CSC_KEY_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}

      - name: Setup macOS code signing
        if: matrix.os == 'macos-latest' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p certs
          echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 --decode > certs/macos-cert.p12
          security create-keychain -p "" build.keychain
          security import certs/macos-cert.p12 -k build.keychain -P "${{ secrets.MACOS_CERT_PASSWORD }}" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

      - name: Build Electron app (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          npm run build-mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ matrix.os == 'macos-latest' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && 'certs/macos-cert.p12' || '' }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Build Electron app (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          npm run build-linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desktop-${{ matrix.os }}
          path: dist/
          retention-days: 30

  # Create release
  release:
    needs: [build-desktop]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/desktop-ubuntu-latest/**/*
            artifacts/desktop-windows-latest/**/*
            artifacts/desktop-macos-latest/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to package managers
  publish-packages:
    needs: [build-desktop]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Homebrew formula
        run: |
          echo "Creating Homebrew formula..."
          # This would create a Homebrew formula for macOS distribution
          # Implementation depends on your specific requirements

  # Deploy website
  deploy-website:
    needs: [build-desktop]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build website
        run: npm run build-website

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./website-dist
          cname: r3habb99.github.io
