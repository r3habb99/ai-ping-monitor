name: Build and Release Cross-Platform

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "draft"
        type: choice
        options:
          - draft
          - prerelease
          - release
      clear_cache:
        description: "Clear all caches before build"
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "18"
  WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
  MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}

jobs:
  # Test job - runs first to validate code
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

      - name: Run linting
        run: npm run lint || echo "Linting not configured yet"

      - name: Test CLI functionality
        run: |
          echo "Testing CLI functionality..."
          timeout 10s node ping-monitor.js --test || echo "CLI test completed"

      - name: Test core ping functionality
        run: |
          echo "Testing core ping functionality..."
          node -e "
            const PingMonitor = require('./ping-monitor.js');
            const monitor = new PingMonitor();
            monitor.runConcurrentPing().then(() => {
              console.log('✅ Core ping test passed');
              process.exit(0);
            }).catch(err => {
              console.error('❌ Core ping test failed:', err);
              process.exit(1);
            });
          "

      - name: Test Electron main process
        run: |
          echo "Testing Electron main process..."
          node -e "
            try {
              require('./src/main.js');
              console.log('✅ Electron main process loads successfully');
            } catch (err) {
              console.error('❌ Electron main process test failed:', err);
              process.exit(1);
            }
          " || echo "Electron test completed with warnings"

  # Desktop builds
  build-desktop:
    needs: test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Clear npm cache
        if: github.event.inputs.clear_cache == 'true'
        run: npm cache clean --force

      - name: Clear electron cache
        if: github.event.inputs.clear_cache == 'true'
        run: |
          # Clear electron cache
          rm -rf ~/.cache/electron || true
          rm -rf ~/Library/Caches/electron || true
          rm -rf "$LOCALAPPDATA/electron/Cache" || true
          # Clear electron-builder cache
          rm -rf ~/.cache/electron-builder || true
          rm -rf ~/Library/Caches/electron-builder || true

      - name: Install dependencies
        run: npm ci

      - name: Debug environment
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Package.json exists: $(test -f package.json && echo 'yes' || echo 'no')"

      - name: Verify icon files
        run: |
          echo "Checking for icon files..."
          ls -la assets/icon.* || echo "No icon files found in assets/"

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libnss3-dev \
            libatk-bridge2.0-dev \
            libdrm-dev \
            libxcomposite-dev \
            libxdamage-dev \
            libxrandr-dev \
            libgbm-dev \
            libxss-dev \
            libasound2-dev \
            libgtk-3-dev \
            libgconf-2-4 \
            libxtst6 \
            libatspi2.0-0

      - name: Setup Windows code signing
        if: matrix.os == 'windows-latest' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && env.WINDOWS_CERTIFICATE != ''
        run: |
          mkdir -p certs
          echo "${{ secrets.WINDOWS_CERTIFICATE }}" | base64 --decode > certs/windows-cert.p12

      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Building Windows app..."
          echo "CSC_LINK: $CSC_LINK"
          npm run build-win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && env.WINDOWS_CERTIFICATE != '') && 'certs/windows-cert.p12' || '' }}
          CSC_KEY_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}

      - name: Setup macOS code signing
        if: matrix.os == 'macos-latest' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && env.MACOS_CERTIFICATE != ''
        run: |
          mkdir -p certs
          echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 --decode > certs/macos-cert.p12
          security create-keychain -p "" build.keychain
          security import certs/macos-cert.p12 -k build.keychain -P "${{ secrets.MACOS_CERT_PASSWORD }}" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

      - name: Setup macOS build configuration
        if: matrix.os == 'macos-latest'
        run: |
          # Create a temporary package.json with conditional afterSign
          if [[ "${{ github.event_name }}" == "push" && "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" && "${{ secrets.MACOS_CERTIFICATE }}" != "" ]]; then
            echo "Setting up signed build configuration..."
            # Add afterSign and entitlements for signed builds
            node -e "
              const pkg = require('./package.json');
              pkg.build.afterSign = './scripts/notarize.js';
              pkg.build.mac.entitlements = 'build/entitlements.mac.plist';
              pkg.build.mac.entitlementsInherit = 'build/entitlements.mac.plist';
              require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
            "
          else
            echo "Setting up unsigned build configuration..."
          fi

      - name: Build Electron app (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "Building macOS app..."
          echo "CSC_LINK: $CSC_LINK"
          echo "Working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Build directory contents:"
          ls -la build/ || echo "Build directory not found"
          echo "Assets directory contents:"
          ls -la assets/ || echo "Assets directory not found"
          echo "Package.json exists: $(test -f package.json && echo 'yes' || echo 'no')"
          echo "Checking package.json build config:"
          node -e "console.log('Icon config:', require('./package.json').build.icon)"
          echo "Running electron-builder with debug..."
          DEBUG=electron-builder npm run build-mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && env.MACOS_CERTIFICATE != '') && 'certs/macos-cert.p12' || '' }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Build Electron app (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Building Linux app..."
          npm run build-linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Show build output
        if: always()
        run: |
          echo "Build completed. Checking output directory..."
          ls -la dist/ || echo "Dist directory not found"
          if [ -d "dist" ]; then
            find dist -type f -name "*.exe" -o -name "*.dmg" -o -name "*.pkg" -o -name "*.deb" -o -name "*.AppImage" -o -name "*.zip" | head -10
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desktop-${{ matrix.os }}
          path: dist/
          retention-days: 30

  # Create release
  release:
    needs: [build-desktop]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/desktop-ubuntu-latest/**/*
            artifacts/desktop-windows-latest/**/*
            artifacts/desktop-macos-latest/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to package managers
  publish-packages:
    needs: [build-desktop]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Homebrew formula
        run: |
          echo "Creating Homebrew formula..."
          # This would create a Homebrew formula for macOS distribution
          # Implementation depends on your specific requirements

  # Deploy website
  deploy-website:
    needs: [build-desktop]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build website
        run: npm run build-website

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./website-dist
          cname: r3habb99.github.io
